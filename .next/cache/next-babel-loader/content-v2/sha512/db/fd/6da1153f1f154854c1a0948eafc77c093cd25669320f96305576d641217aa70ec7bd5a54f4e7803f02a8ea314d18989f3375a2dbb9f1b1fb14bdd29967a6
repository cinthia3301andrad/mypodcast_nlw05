{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/sindyme/\\xC1rea de Trabalho/mypodcast_nlw05/src/contexts/PlayerContext.tsx\";\nimport { createContext, useState } from \"react\";\nexport const PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider({\n  children\n}) {\n  const {\n    0: episodeList,\n    1: setEpisodeList\n  } = useState([]);\n  const {\n    0: currentEpisodeIndex,\n    1: setCurrentEpisodeIndex\n  } = useState(0);\n  const {\n    0: isPlaying,\n    1: setIsPlaying\n  } = useState(false);\n  const {\n    0: isLooping,\n    1: setIsLooping\n  } = useState(false);\n  const hasPrevious = currentEpisodeIndex > 0;\n  const hasNext = currentEpisodeIndex + 1 < episodeList.length;\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function playNext() {\n    const nextEpisodeIndex = currentEpisodeIndex + 1;\n\n    if (nextEpisodeIndex >= episodeList.length) {\n      return;\n    }\n\n    setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n  }\n\n  function playPrevious() {\n    if (currentEpisodeIndex > 0) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList,\n      currentEpisodeIndex,\n      play,\n      isPlaying,\n      togglePlay,\n      setPlayingState,\n      playList,\n      playNext,\n      playPrevious,\n      hasNext,\n      hasPrevious\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/home/sindyme/√Årea de Trabalho/mypodcast_nlw05/src/contexts/PlayerContext.tsx"],"names":["createContext","useState","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","isLooping","setIsLooping","hasPrevious","hasNext","length","play","episode","togglePlay","setPlayingState","state","playList","list","index","playNext","nextEpisodeIndex","playPrevious"],"mappings":";;AAAA,SAASA,aAAT,EAAmCC,QAAnC,QAAmD,OAAnD;AA4BA,OAAO,MAAMC,aAAa,gBAAGF,aAAa,CAAC,EAAD,CAAnC;AAEP,OAAO,SAASG,qBAAT,CAA+B;AACpCC,EAAAA;AADoC,CAA/B,EAEwB;AAC7B,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCL,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AAAA,OAACM,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDP,QAAQ,CAAC,CAAD,CAA9D;AACA,QAAM;AAAA,OAACQ,SAAD;AAAA,OAAYC;AAAZ,MAA4BT,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAA,OAACU,SAAD;AAAA,OAAYC;AAAZ,MAA4BX,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAMY,WAAW,GAAGN,mBAAmB,GAAG,CAA1C;AACA,QAAMO,OAAO,GAAGP,mBAAmB,GAAG,CAAtB,GAA0BF,WAAW,CAACU,MAAtD;;AAEA,WAASC,IAAT,CAAcC,OAAd,EAAgC;AAC9BX,IAAAA,cAAc,CAAC,CAACW,OAAD,CAAD,CAAd;AACAT,IAAAA,sBAAsB,CAAC,CAAD,CAAtB;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,WAASQ,UAAT,GAAsB;AACpBR,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD;;AAED,WAASU,eAAT,CAAyBC,KAAzB,EAAyC;AACvCV,IAAAA,YAAY,CAACU,KAAD,CAAZ;AACD;;AAED,WAASC,QAAT,CAAkBC,IAAlB,EAAmCC,KAAnC,EAAkD;AAChDjB,IAAAA,cAAc,CAACgB,IAAD,CAAd;AACAd,IAAAA,sBAAsB,CAACe,KAAD,CAAtB;AACAb,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,WAASc,QAAT,GAAoB;AAClB,UAAMC,gBAAgB,GAAGlB,mBAAmB,GAAG,CAA/C;;AACA,QAAIkB,gBAAgB,IAAIpB,WAAW,CAACU,MAApC,EAA4C;AAC1C;AACD;;AACDP,IAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACD;;AAED,WAASmB,YAAT,GAAwB;AACtB,QAAInB,mBAAmB,GAAG,CAA1B,EAA6B;AAC3BC,MAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACD;AACF;;AAED,sBACE,QAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AACLF,MAAAA,WADK;AAELE,MAAAA,mBAFK;AAGLS,MAAAA,IAHK;AAILP,MAAAA,SAJK;AAKLS,MAAAA,UALK;AAMLC,MAAAA,eANK;AAOLE,MAAAA,QAPK;AAQLG,MAAAA,QARK;AASLE,MAAAA,YATK;AAULZ,MAAAA,OAVK;AAWLD,MAAAA;AAXK,KADT;AAAA,cAeGT;AAfH;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD","sourcesContent":["import { createContext, ReactNode, useState } from \"react\";\n\ninterface Episode {\n  title: string;\n  members: string;\n  thumbnail: string;\n  duration: number;\n  url: string;\n}\n\ninterface PlayerContextData {\n  episodeList: Array<Episode>;\n  currentEpisodeIndex: number;\n  isPlaying: boolean;\n  play: (episode: Episode) => void;\n  playList: (list: Episode[], index: number) => void;\n  setPlayingState: (state: boolean) => void;\n  togglePlay: () => void;\n  playNext: () => void;\n  playPrevious: () => void;\n  hasNext: boolean;\n  hasPrevious: boolean;\n}\n\ninterface PlayerContextProviderProps {\n  children: ReactNode;\n}\n\nexport const PlayerContext = createContext({} as PlayerContextData);\n\nexport function PlayerContextProvider({\n  children,\n}: PlayerContextProviderProps) {\n  const [episodeList, setEpisodeList] = useState([]);\n  const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isLooping, setIsLooping] = useState(false);\n\n  const hasPrevious = currentEpisodeIndex > 0;\n  const hasNext = currentEpisodeIndex + 1 < episodeList.length;\n\n  function play(episode: Episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function setPlayingState(state: boolean) {\n    setIsPlaying(state);\n  }\n\n  function playList(list: Episode[], index: number) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function playNext() {\n    const nextEpisodeIndex = currentEpisodeIndex + 1;\n    if (nextEpisodeIndex >= episodeList.length) {\n      return;\n    }\n    setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n  }\n\n  function playPrevious() {\n    if (currentEpisodeIndex > 0) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return (\n    <PlayerContext.Provider\n      value={{\n        episodeList,\n        currentEpisodeIndex,\n        play,\n        isPlaying,\n        togglePlay,\n        setPlayingState,\n        playList,\n        playNext,\n        playPrevious,\n        hasNext,\n        hasPrevious,\n      }}\n    >\n      {children}\n    </PlayerContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}