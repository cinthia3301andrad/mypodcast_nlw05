{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/sindyme/\\xC1rea de Trabalho/mypodcast_nlw05/src/pages/index.tsx\";\nimport { format, parseISO } from 'date-fns';\nimport ptBR from 'date-fns/locale/pt-BR';\nimport { api } from '../services/api';\nimport { convertDurationToTimeString } from '../utils/convertDurationToTimeString';\nimport { ContainerHome, LatestEpisodes, AllEpisodes } from './stylesHome';\nexport default function Home({\n  latestEpisodes,\n  allEpisodes\n}) {\n  return /*#__PURE__*/_jsxDEV(ContainerHome, {\n    children: [/*#__PURE__*/_jsxDEV(LatestEpisodes, {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: latestEpisodes.map(episode => {\n          return /*#__PURE__*/_jsxDEV(\"li\", {}, episode.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AllEpisodes, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n} //com \"const NomeDaFunção: Tipagem = () => {}\" conseguimos tipar os parametros da função e seu retorno\n\nexport const getStaticProps = async () => {\n  const {\n    data\n  } = await api.get('episodes', {\n    params: {\n      _limit: 12,\n      _sort: 'published_at',\n      _order: 'desc'\n    }\n  });\n  const episodes = data.map(episode => {\n    return {\n      id: episode.id,\n      title: episode.title,\n      members: episode.members,\n      publishedAt: format(parseISO(episode.published_at), 'd MMM yy', {\n        locale: ptBR\n      }),\n      thumbnail: episode.thumbnail,\n      duration: Number(episode.file.duration),\n      description: episode.description,\n      url: episode.file.url,\n      durationAsString: convertDurationToTimeString(Number(episode.file.duration))\n    };\n  });\n  const latestEpisodes = episodes.slice(0, 2);\n  const allEpisodes = episodes.slice(2, episodes.length);\n  return {\n    props: {\n      latestEpisodes,\n      allEpisodes\n    },\n    revalidate: 60 * 60 * 8\n  };\n};","map":{"version":3,"sources":["/home/sindyme/Área de Trabalho/mypodcast_nlw05/src/pages/index.tsx"],"names":["format","parseISO","ptBR","api","convertDurationToTimeString","ContainerHome","LatestEpisodes","AllEpisodes","Home","latestEpisodes","allEpisodes","map","episode","id","getStaticProps","data","get","params","_limit","_sort","_order","episodes","title","members","publishedAt","published_at","locale","thumbnail","duration","Number","file","description","url","durationAsString","slice","length","props","revalidate"],"mappings":";;AAEA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,UAAjC;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,SAASC,GAAT,QAAoB,iBAApB;AAEA,SAASC,2BAAT,QAA4C,sCAA5C;AACA,SAAQC,aAAR,EAAuBC,cAAvB,EAAuCC,WAAvC,QAAyD,cAAzD;AAmBA,eAAe,SAASC,IAAT,CAAc;AAACC,EAAAA,cAAD;AAAiBC,EAAAA;AAAjB,CAAd,EAAwD;AAErE,sBACE,QAAC,aAAD;AAAA,4BACE,QAAC,cAAD;AAAA,6BACE;AAAA,kBAEID,cAAc,CAACE,GAAf,CAAmBC,OAAO,IAAI;AAC5B,8BACE,kBAASA,OAAO,CAACC,EAAjB;AAAA;AAAA;AAAA;AAAA,kBADF;AAKD,SAND;AAFJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAgBE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,C,CAED;;AACA,OAAO,MAAMC,cAA8B,GAAG,YAAY;AACxD,QAAM;AAACC,IAAAA;AAAD,MAAS,MAAMZ,GAAG,CAACa,GAAJ,CAAQ,UAAR,EAAoB;AACvCC,IAAAA,MAAM,EAAE;AACNC,MAAAA,MAAM,EAAE,EADF;AAENC,MAAAA,KAAK,EAAE,cAFD;AAGNC,MAAAA,MAAM,EAAE;AAHF;AAD+B,GAApB,CAArB;AAQA,QAAMC,QAAQ,GAAGN,IAAI,CAACJ,GAAL,CAASC,OAAO,IAAI;AACnC,WAAO;AACLC,MAAAA,EAAE,EAAED,OAAO,CAACC,EADP;AAELS,MAAAA,KAAK,EAAEV,OAAO,CAACU,KAFV;AAGLC,MAAAA,OAAO,EAAEX,OAAO,CAACW,OAHZ;AAILC,MAAAA,WAAW,EAAExB,MAAM,CAACC,QAAQ,CAACW,OAAO,CAACa,YAAT,CAAT,EAAiC,UAAjC,EAA6C;AAACC,QAAAA,MAAM,EAAExB;AAAT,OAA7C,CAJd;AAKLyB,MAAAA,SAAS,EAAEf,OAAO,CAACe,SALd;AAMLC,MAAAA,QAAQ,EAAEC,MAAM,CAACjB,OAAO,CAACkB,IAAR,CAAaF,QAAd,CANX;AAOLG,MAAAA,WAAW,EAAEnB,OAAO,CAACmB,WAPhB;AAQLC,MAAAA,GAAG,EAAEpB,OAAO,CAACkB,IAAR,CAAaE,GARb;AASLC,MAAAA,gBAAgB,EAAE7B,2BAA2B,CAACyB,MAAM,CAACjB,OAAO,CAACkB,IAAR,CAAaF,QAAd,CAAP;AATxC,KAAP;AAWD,GAZgB,CAAjB;AAcA,QAAMnB,cAAc,GAAGY,QAAQ,CAACa,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAvB;AACA,QAAMxB,WAAW,GAAGW,QAAQ,CAACa,KAAT,CAAe,CAAf,EAAkBb,QAAQ,CAACc,MAA3B,CAApB;AAEA,SAAO;AACLC,IAAAA,KAAK,EAAE;AACL3B,MAAAA,cADK;AAELC,MAAAA;AAFK,KADF;AAKL2B,IAAAA,UAAU,EAAE,KAAG,EAAH,GAAM;AALb,GAAP;AAQD,CAlCM","sourcesContent":["import {GetStaticProps} from 'next';\n\nimport { format, parseISO } from 'date-fns'\nimport ptBR from 'date-fns/locale/pt-BR'\nimport { api } from '../services/api';\n\nimport { convertDurationToTimeString } from '../utils/convertDurationToTimeString';\nimport {ContainerHome, LatestEpisodes, AllEpisodes} from './stylesHome'\n\n\ninterface Episode  {\n  id: string;     \n  title: string;\n  members: string;\n  publishedAt: string;\n  thumbnail: string;\n  duration: number;\n  description: string;\n  url: string;\n  durationAsString: string;\n}\ninterface HomeProps  {\n  latestEpisodes: Array<Episode>;\n  allEpisodes: Array<Episode>;\n}\n\nexport default function Home({latestEpisodes, allEpisodes}: HomeProps) {\n  \n  return (\n    <ContainerHome>\n      <LatestEpisodes>\n        <ul>\n          {\n            latestEpisodes.map(episode => {\n              return (\n                <li key={episode.id}>\n\n                </li>\n              )\n            })\n          }\n        </ul>\n\n      </LatestEpisodes>\n\n      <AllEpisodes>\n\n      </AllEpisodes>\n    </ContainerHome>\n  )\n}\n\n//com \"const NomeDaFunção: Tipagem = () => {}\" conseguimos tipar os parametros da função e seu retorno\nexport const getStaticProps: GetStaticProps = async() =>  {\n  const {data} = await api.get('episodes', {\n    params: {\n      _limit: 12,\n      _sort: 'published_at',\n      _order: 'desc'\n    }\n  });\n\n  const episodes = data.map(episode => {\n    return {\n      id: episode.id,      \n      title: episode.title,\n      members: episode.members,\n      publishedAt: format(parseISO(episode.published_at), 'd MMM yy', {locale: ptBR}),\n      thumbnail: episode.thumbnail,\n      duration: Number(episode.file.duration),\n      description: episode.description,\n      url: episode.file.url,\n      durationAsString: convertDurationToTimeString(Number(episode.file.duration))\n    }\n  })\n\n  const latestEpisodes = episodes.slice(0, 2);\n  const allEpisodes = episodes.slice(2, episodes.length)\n  \n  return {\n    props: {\n      latestEpisodes, \n      allEpisodes\n    },\n    revalidate: 60*60*8,\n  }\n  \n}"]},"metadata":{},"sourceType":"module"}