{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/sindyme/\\xC1rea de Trabalho/mypodcast_nlw05/src/contexts/PlayerContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from \"react\";\nexport var PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      episodeList = _useState[0],\n      setEpisodeList = _useState[1];\n\n  var _useState2 = useState(0),\n      currentEpisodeIndex = _useState2[0],\n      setCurrentEpisodeIndex = _useState2[1];\n\n  var _useState3 = useState(false),\n      isPlaying = _useState3[0],\n      setIsPlaying = _useState3[1];\n\n  var _useState4 = useState(false),\n      isLooping = _useState4[0],\n      setIsLooping = _useState4[1];\n\n  var _useState5 = useState(false),\n      isShuffling = _useState5[0],\n      setIsShuffling = _useState5[1];\n\n  var hasPrevious = currentEpisodeIndex > 0;\n  var hasNext = currentEpisodeIndex + 1 < episodeList.length;\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n\n  function toggleShuffle() {\n    setIsShuffling(!isShuffling);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function playNext() {\n    var nextEpisodeIndex = currentEpisodeIndex + 1;\n\n    if (nextEpisodeIndex >= episodeList.length) {\n      return;\n    }\n\n    setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n  }\n\n  function playPrevious() {\n    if (currentEpisodeIndex > 0) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList: episodeList,\n      currentEpisodeIndex: currentEpisodeIndex,\n      play: play,\n      isPlaying: isPlaying,\n      togglePlay: togglePlay,\n      setPlayingState: setPlayingState,\n      playList: playList,\n      playNext: playNext,\n      playPrevious: playPrevious,\n      hasNext: hasNext,\n      hasPrevious: hasPrevious,\n      isLooping: isLooping,\n      toggleLoop: toggleLoop,\n      isShuffling: isShuffling,\n      toggleShuffle: toggleShuffle\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PlayerContextProvider, \"YSXWY8OfLfVxd5To+FHcHi+GAY0=\");\n\n_c = PlayerContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerContextProvider\");","map":{"version":3,"sources":["/home/sindyme/√Årea de Trabalho/mypodcast_nlw05/src/contexts/PlayerContext.tsx"],"names":["createContext","useState","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","isLooping","setIsLooping","isShuffling","setIsShuffling","hasPrevious","hasNext","length","play","episode","togglePlay","toggleLoop","toggleShuffle","setPlayingState","state","playList","list","index","playNext","nextEpisodeIndex","playPrevious"],"mappings":"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","sourcesContent":["import { createContext, ReactNode, useState } from \"react\";\n\ninterface Episode {\n  title: string;\n  members: string;\n  thumbnail: string;\n  duration: number;\n  url: string;\n}\n\ninterface PlayerContextData {\n  episodeList: Array<Episode>;\n  currentEpisodeIndex: number;\n  isPlaying: boolean;\n  play: (episode: Episode) => void;\n  playList: (list: Episode[], index: number) => void;\n  setPlayingState: (state: boolean) => void;\n  togglePlay: () => void;\n  playNext: () => void;\n  playPrevious: () => void;\n  hasNext: boolean;\n  hasPrevious: boolean;\n  isLooping: boolean;\n  toggleLoop: () => void;\n  toggleShuffle: () => void;\n  isShuffling: boolean;\n}\n\ninterface PlayerContextProviderProps {\n  children: ReactNode;\n}\n\nexport const PlayerContext = createContext({} as PlayerContextData);\n\nexport function PlayerContextProvider({\n  children,\n}: PlayerContextProviderProps) {\n  const [episodeList, setEpisodeList] = useState([]);\n  const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isLooping, setIsLooping] = useState(false);\n  const [isShuffling, setIsShuffling] = useState(false);\n\n  const hasPrevious = currentEpisodeIndex > 0;\n  const hasNext = currentEpisodeIndex + 1 < episodeList.length;\n\n  function play(episode: Episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n  function toggleShuffle() {\n    setIsShuffling(!isShuffling);\n  }\n\n  function setPlayingState(state: boolean) {\n    setIsPlaying(state);\n  }\n\n  function playList(list: Episode[], index: number) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function playNext() {\n    const nextEpisodeIndex = currentEpisodeIndex + 1;\n    if (nextEpisodeIndex >= episodeList.length) {\n      return;\n    }\n    setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n  }\n\n  function playPrevious() {\n    if (currentEpisodeIndex > 0) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return (\n    <PlayerContext.Provider\n      value={{\n        episodeList,\n        currentEpisodeIndex,\n        play,\n        isPlaying,\n        togglePlay,\n        setPlayingState,\n        playList,\n        playNext,\n        playPrevious,\n        hasNext,\n        hasPrevious,\n        isLooping,\n        toggleLoop,\n        isShuffling,\n        toggleShuffle,\n      }}\n    >\n      {children}\n    </PlayerContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}