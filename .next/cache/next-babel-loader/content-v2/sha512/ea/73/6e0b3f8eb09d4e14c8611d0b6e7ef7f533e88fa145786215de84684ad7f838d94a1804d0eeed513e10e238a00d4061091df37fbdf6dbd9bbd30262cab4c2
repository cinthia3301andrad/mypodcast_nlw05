{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/sindyme/\\xC1rea de Trabalho/mypodcast_nlw05/src/contexts/PlayerContext.tsx\";\nimport { createContext, useState } from \"react\";\nexport const PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider({\n  children\n}) {\n  const {\n    0: episodeList,\n    1: setEpisodeList\n  } = useState([]);\n  const {\n    0: currentEpisodeIndex,\n    1: setCurrentEpisodeIndex\n  } = useState(0);\n  const {\n    0: isPlaying,\n    1: setIsPlaying\n  } = useState(false);\n  const {\n    0: isLooping,\n    1: setIsLooping\n  } = useState(false);\n  const {\n    0: isShuffling,\n    1: setIsShuffling\n  } = useState(false);\n  const hasPrevious = currentEpisodeIndex > 0;\n  const hasNext = currentEpisodeIndex + 1 < episodeList.length;\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n\n  function toggleShuffle() {\n    setIsShuffling(!isShuffling);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function playNext() {\n    if (isShuffling) {\n      const nextRandomEpisodeIndex = Math.floor(Math.random() * episodeList.length);\n      setCurrentEpisodeIndex(nextRandomEpisodeIndex);\n    } else if (hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (currentEpisodeIndex > 0) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList,\n      currentEpisodeIndex,\n      play,\n      isPlaying,\n      togglePlay,\n      setPlayingState,\n      playList,\n      playNext,\n      playPrevious,\n      hasNext,\n      hasPrevious,\n      isLooping,\n      toggleLoop,\n      isShuffling,\n      toggleShuffle\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/home/sindyme/√Årea de Trabalho/mypodcast_nlw05/src/contexts/PlayerContext.tsx"],"names":["createContext","useState","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","isLooping","setIsLooping","isShuffling","setIsShuffling","hasPrevious","hasNext","length","play","episode","togglePlay","toggleLoop","toggleShuffle","setPlayingState","state","playList","list","index","playNext","nextRandomEpisodeIndex","Math","floor","random","playPrevious"],"mappings":";;AAAA,SAASA,aAAT,EAAmCC,QAAnC,QAAmD,OAAnD;AAgCA,OAAO,MAAMC,aAAa,gBAAGF,aAAa,CAAC,EAAD,CAAnC;AAEP,OAAO,SAASG,qBAAT,CAA+B;AACpCC,EAAAA;AADoC,CAA/B,EAEwB;AAC7B,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCL,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AAAA,OAACM,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDP,QAAQ,CAAC,CAAD,CAA9D;AACA,QAAM;AAAA,OAACQ,SAAD;AAAA,OAAYC;AAAZ,MAA4BT,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAA,OAACU,SAAD;AAAA,OAAYC;AAAZ,MAA4BX,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAA,OAACY,WAAD;AAAA,OAAcC;AAAd,MAAgCb,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAMc,WAAW,GAAGR,mBAAmB,GAAG,CAA1C;AACA,QAAMS,OAAO,GAAGT,mBAAmB,GAAG,CAAtB,GAA0BF,WAAW,CAACY,MAAtD;;AAEA,WAASC,IAAT,CAAcC,OAAd,EAAgC;AAC9Bb,IAAAA,cAAc,CAAC,CAACa,OAAD,CAAD,CAAd;AACAX,IAAAA,sBAAsB,CAAC,CAAD,CAAtB;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,WAASU,UAAT,GAAsB;AACpBV,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD;;AACD,WAASY,UAAT,GAAsB;AACpBT,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD;;AACD,WAASW,aAAT,GAAyB;AACvBR,IAAAA,cAAc,CAAC,CAACD,WAAF,CAAd;AACD;;AAED,WAASU,eAAT,CAAyBC,KAAzB,EAAyC;AACvCd,IAAAA,YAAY,CAACc,KAAD,CAAZ;AACD;;AAED,WAASC,QAAT,CAAkBC,IAAlB,EAAmCC,KAAnC,EAAkD;AAChDrB,IAAAA,cAAc,CAACoB,IAAD,CAAd;AACAlB,IAAAA,sBAAsB,CAACmB,KAAD,CAAtB;AACAjB,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,WAASkB,QAAT,GAAoB;AAClB,QAAIf,WAAJ,EAAiB;AACf,YAAMgB,sBAAsB,GAAGC,IAAI,CAACC,KAAL,CAC7BD,IAAI,CAACE,MAAL,KAAgB3B,WAAW,CAACY,MADC,CAA/B;AAGAT,MAAAA,sBAAsB,CAACqB,sBAAD,CAAtB;AACD,KALD,MAKO,IAAIb,OAAJ,EAAa;AAClBR,MAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACD;AACF;;AAED,WAAS0B,YAAT,GAAwB;AACtB,QAAI1B,mBAAmB,GAAG,CAA1B,EAA6B;AAC3BC,MAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACD;AACF;;AAED,sBACE,QAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AACLF,MAAAA,WADK;AAELE,MAAAA,mBAFK;AAGLW,MAAAA,IAHK;AAILT,MAAAA,SAJK;AAKLW,MAAAA,UALK;AAMLG,MAAAA,eANK;AAOLE,MAAAA,QAPK;AAQLG,MAAAA,QARK;AASLK,MAAAA,YATK;AAULjB,MAAAA,OAVK;AAWLD,MAAAA,WAXK;AAYLJ,MAAAA,SAZK;AAaLU,MAAAA,UAbK;AAcLR,MAAAA,WAdK;AAeLS,MAAAA;AAfK,KADT;AAAA,cAmBGlB;AAnBH;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD","sourcesContent":["import { createContext, ReactNode, useState } from \"react\";\n\ninterface Episode {\n  title: string;\n  members: string;\n  thumbnail: string;\n  duration: number;\n  url: string;\n}\n\ninterface PlayerContextData {\n  episodeList: Array<Episode>;\n  currentEpisodeIndex: number;\n  isPlaying: boolean;\n  play: (episode: Episode) => void;\n  playList: (list: Episode[], index: number) => void;\n  setPlayingState: (state: boolean) => void;\n  togglePlay: () => void;\n  playNext: () => void;\n  playPrevious: () => void;\n  hasNext: boolean;\n  hasPrevious: boolean;\n  isLooping: boolean;\n  toggleLoop: () => void;\n  toggleShuffle: () => void;\n  isShuffling: boolean;\n}\n\ninterface PlayerContextProviderProps {\n  children: ReactNode;\n}\n\nexport const PlayerContext = createContext({} as PlayerContextData);\n\nexport function PlayerContextProvider({\n  children,\n}: PlayerContextProviderProps) {\n  const [episodeList, setEpisodeList] = useState([]);\n  const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isLooping, setIsLooping] = useState(false);\n  const [isShuffling, setIsShuffling] = useState(false);\n\n  const hasPrevious = currentEpisodeIndex > 0;\n  const hasNext = currentEpisodeIndex + 1 < episodeList.length;\n\n  function play(episode: Episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n  function toggleShuffle() {\n    setIsShuffling(!isShuffling);\n  }\n\n  function setPlayingState(state: boolean) {\n    setIsPlaying(state);\n  }\n\n  function playList(list: Episode[], index: number) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function playNext() {\n    if (isShuffling) {\n      const nextRandomEpisodeIndex = Math.floor(\n        Math.random() * episodeList.length\n      );\n      setCurrentEpisodeIndex(nextRandomEpisodeIndex);\n    } else if (hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (currentEpisodeIndex > 0) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return (\n    <PlayerContext.Provider\n      value={{\n        episodeList,\n        currentEpisodeIndex,\n        play,\n        isPlaying,\n        togglePlay,\n        setPlayingState,\n        playList,\n        playNext,\n        playPrevious,\n        hasNext,\n        hasPrevious,\n        isLooping,\n        toggleLoop,\n        isShuffling,\n        toggleShuffle,\n      }}\n    >\n      {children}\n    </PlayerContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}